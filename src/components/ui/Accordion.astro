import { Icon } from 'astro-icon';
import { useState, useRef, useEffect } from 'react'; // Use React hooks for state management

interface Props {
  title: string;
  details: string;
  isOpen?: boolean;
  classes?: {
    container?: string;
    button?: string;
    chevron?: string;
    content?: string;
  };
}

export default function Accordion({ title, details, isOpen = false, classes = {} }: Props) {
  const [open, setOpen] = useState(isOpen);
  const contentRef = useRef<HTMLDivElement>(null);

  // Handle the accordion toggle
  const toggleAccordion = () => {
    setOpen((prev) => !prev);
  };

  // Update the max-height of the content for smooth transitions
  useEffect(() => {
    if (contentRef.current) {
      contentRef.current.style.maxHeight = open ? `${contentRef.current.scrollHeight}px` : '0px';
    }
  }, [open]);

  return (
    <div className={`accordion group relative ${classes.container}`}>
      <button
        className={`accordion__button ${classes.button}`}
        type="button"
        onClick={toggleAccordion}
        aria-expanded={open}
        aria-controls={`${title} accordion menu content`}
      >
        {title}
        <Icon
          name="tabler:chevron-down"
          aria-hidden="true"
          className={`accordion__chevron ${classes.chevron} ${open ? 'rotate-180' : ''}`}
        />
      </button>

      <div
        id={`${title} accordion menu content`}
        aria-labelledby={`${title} accordion menu button`}
        className={`accordion__content ${classes.content}`}
        ref={contentRef}
        style={{ overflow: 'hidden', transition: 'max-height 0.3s ease-in-out' }}
      >
        <p className="prose mb-4 mt-1 max-w-full transition-[height]">
          {details}
        </p>
      </div>
    </div>
  );
}